# -*- coding: utf-8 -*-
"""Aula1python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oSh8KHZ9DeA8fxfh1rE_9RqRZplSn1qY
"""

import pandas as pd

df = pd.read_csv("https://raw.githubusercontent.com/guilhermeonrails/data-jobs/refs/heads/main/salaries.csv")

df.head()

df.info()

df.describe()

df.shape

linhas, colunas = df.shape[0] , df.shape[1]
print("Linhas:",linhas)
print("Colunas:",colunas)

df.columns

# Traduzir as colunas para português brasileiro
renomear_colunas = {
    'work_year': 'ano',
    'experience_level': 'senioridade',
    'employment_type': 'contrato',
    'job_title': 'cargo',
    'salary': 'salario',
    'salary_currency': 'moeda',
    'salary_in_usd': 'usd',
    'employee_residence': 'residencia',
    'remote_ratio': 'taxa_remoto',
    'company_location': 'empresa',
    'company_size': 'tamanho_empresa'
}
df.rename(columns=renomear_colunas,inplace=True)
# Exibir as colunas traduzidas para confirmar
print(df.columns)

df["senioridade"].value_counts()

df["contrato"].value_counts()

df["taxa_remoto"].value_counts()

df["tamanho_empresa"].value_counts()

# Traduzir as categorias da coluna 'senioridade'
senioridade = {
    'SE': 'Senior',
    'MI': 'Pleno',
    'EN': 'Junior',
    'EX': 'Executivo'
}

df["senioridade"] = df["senioridade"].replace(senioridade)
df["senioridade"].value_counts()

# Traduzir as categorias da coluna 'contrato'
contrato = {
    'FT': 'Tempo Integral',
    'CT': 'Contrato',
    'PT': 'Tempo Parcial',
    'FL': 'Freelancer'
}

df["contrato"] = df["contrato"].replace(contrato)

df["contrato"].value_counts()

# Traduzir as categorias da coluna 'taxa_remoto'
taxa_remoto = {
    0: 'Presencial',
    50: 'Híbrido',
    100: 'Remoto'
}

df["taxa_remoto"] = df["taxa_remoto"].replace(taxa_remoto)
df["taxa_remoto"].value_counts()

# Traduzir as categorias da coluna 'tamanho_empresa'
tamanho_empresa = {
    'M': 'Médio',
    'L': 'Grande',
    'S': 'Pequeno'
}

df["tamanho_empresa"] = df["tamanho_empresa"].replace(tamanho_empresa)
df["tamanho_empresa"].value_counts()

df.head()

df.describe(include= "object")

df.describe()

df.isnull()

df.isnull().sum()

df["ano"].unique()

df[df.isnull().any(axis = 1 )]

import numpy as np
df_salarios = pd.DataFrame({
  'nome':["Ana","Bruno","Pedro","Isabela","Joao"] ,
  'salario':[4000, np.nan ,5000, np.nan,100000 ]
})
#Calcula a media salarial e substitui os nulos pela média e arredonda os valores

df_salarios['salario_media'] = df_salarios['salario'].fillna(df_salarios['salario'].mean().round(2))
#Calcula a mediana e substitui os nulos pela mediana
df_salarios['salario_mediana'] = df_salarios['salario'].fillna(df_salarios['salario'].median())
df_salarios

df_temperaturas = pd.DataFrame({
    "Dia":["Segunda","Terça","Quarta","Quinta","Sexta"],
    "Temperatura":[30,np.nan,np.nan,28,27]
})
df_temperaturas["Preenchido_ffill"] = df_temperaturas["Temperatura"].ffill()
df_temperaturas

df_temperaturas = pd.DataFrame({
    "Dia":["Segunda","Terça","Quarta","Quinta","Sexta"],
    "Temperatura":[30,np.nan,np.nan,28,27]
})
df_temperaturas["Preenchido_bfill"] = df_temperaturas["Temperatura"].bfill()
df_temperaturas

df_cidades = pd.DataFrame({
    'nome':["Ana","Bruno","Pedro","Isabela","Joao"],
    'cidade' : ["São Paulo",np.nan,"Curitiba",np.nan,"Recife"]
})
df_cidades ["cidade_preenchida"] = df_cidades["cidade"].fillna( "Não informado")
df_cidades

df_limpo = df.dropna()

df_limpo.isnull().sum()

df_limpo.head()

df_limpo.info()

df_limpo = df_limpo.assign(ano = df_limpo["ano"].astype('int64'))

df_limpo.head()

df_limpo['senioridade'].value_counts().plot(kind='bar', title='Distribuição de senioridade')

import seaborn as sns

sns.barplot(data = df_limpo, x='senioridade', y='usd')

import matplotlib.pyplot as plt

plt.figure(figsize=(8, 5))
#define o tamanho
sns.barplot(data=df_limpo, x='senioridade', y='usd')
plt.title("Salário médio anual por senioridade")
plt.xlabel("Senioridade")
plt.ylabel("USD")
plt.show()

df_limpo.groupby("senioridade")["usd"].mean().round(2).sort_values(ascending=False)
# Qual a coluna usada para agrupar, passar a coluna que vaii calcular a estatistica;sort_values ordenação , parametro
# Armazenar isso dentro de uma variavel para usar como parametro para o seaborn fazer a ordenação

ordem = df_limpo.groupby("senioridade")["usd"].mean().round(2).sort_values(ascending=True).index
#true mostra o grafico decescente

ordem

plt.figure(figsize=(8, 5))
#define o tamanho
sns.barplot(data=df_limpo, x='senioridade', y='usd', order = ordem)
plt.title("Salário médio anual por senioridade")
plt.xlabel("Senioridade")
plt.ylabel("USD")
plt.show()

plt.figure(figsize=(10, 5))
#define o tamanho
sns.histplot(df_limpo['usd'], bins = 50, kde= True)
plt.title("Distribuição salarial anual ")
plt.xlabel("Salario em USD ")
plt.ylabel("Frequencia")
plt.show()

plt.figure(figsize=(8, 5))
sns.boxplot( x=df_limpo['usd'])
plt.title("Boxplot Salário")
plt.xlabel("Senioridade")
plt.show()

ordem_senioridade = ['Junior', 'Pleno', 'Senior', 'Executivo']
plt.figure(figsize=(8, 5))
sns.boxplot(x='senioridade', y='usd', data=df_limpo, order=ordem_senioridade)
plt.title("Boxplot  Distribuição de salários  por senioridade")
plt.xlabel("Senioridade")
plt.show()

ordem_senioridade = ['Junior', 'Pleno', 'Senior', 'Executivo']
plt.figure(figsize=(8, 5))
sns.boxplot(x='senioridade', y='usd', data=df_limpo, order=ordem_senioridade, palette= 'Set2', hue = 'senioridade')
plt.title("Boxplot  Distribuição de salários  por senioridade")
plt.xlabel("Senioridade")
plt.show()

import plotly.express as px

senioridade_media_salarial = df_limpo.groupby("senioridade")["usd"].mean().sort_values(ascending=False).reset_index()
fig = px.bar(senioridade_media_salarial, x="senioridade", y="usd", title="Média salarial por senioridade", labels={'senioridade':'nivel de senioridade',
'usd':'Média Salarial Anual(USD)'})
fig.show()

remoto_contagem = df_limpo['taxa_remoto'].value_counts().reset_index()
remoto_contagem.columns = ['tipo_trabalho', 'quantidade']
fig = px.pie(remoto_contagem,
 names = 'tipo_trabalho', values = 'quantidade',
 title = 'Proporção dos tipos de trabalho'
             , hole= 0.5
         )
fig.update_traces(textinfo='percent+label')
fig.show()

df_limpo.to_csv('dados-imersao-final.csv',index= False)